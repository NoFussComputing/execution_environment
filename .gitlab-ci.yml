---
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  MY_PROJECT_ID: "45741845"
  #DOCKER_TARGET_PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7 #linux/arm/v6
  #DOCKER_CREATED_IMAGE_NAME: ansible-ee
  GIT_SYNC_URL: "https://$GITHUB_USERNAME_ROBOT:$GITHUB_TOKEN_ROBOT@github.com/NoFussComputing/execution_environment.git"



include:
  - project: nofusscomputing/projects/gitlab-ci
    ref: restructure
    file:
      - .gitlab-ci_common.yaml
      - type/docker-image.gitlab-ci.yaml
      # - conventional_commits/.gitlab-ci.yml
      # - gitlab_release/.gitlab-ci.yml
      # - git_push_mirror/.gitlab-ci.yml
  #- template: Jobs/Container-Scanning.gitlab-ci.yml # see https://gitlab.com/gitlab-org/gitlab/-/issues/381665


Build/Cache Python Packages:
  stage: build
  image: nofusscomputing/docker-buildx-qemu:dev
  services:
    - name: docker:23-dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]

  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker info
    #- docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export DEBIAN_FRONTEND=noninteractive
    - apt update --allow-releaseinfo-change
    - apt --no-install-recommends -yq install python3 git python3-pip
    #- pip3 install -r gitlab-ci/gitlab_release/requirements.txt
    - pip3 install setuptools wheel
    - pip3 install commitizen==2.21.0 # version specified so current build works.
    - pip3 install gitlab-ci/gitlab_release/python-module/cz_nfc/.
    - update-binfmts --enable # Important: Ensures execution of other binary formats is enabled in the kernel
    - docker buildx create --driver=docker-container --driver-opt image=moby/buildkit:v0.11.6 --use
    - docker buildx inspect --bootstrap

  script: |

      docker buildx build \
        --file dockerfile-build_cache \
        --platform=$DOCKER_TARGET_PLATFORMS . \
        --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN \
        --build-arg CI_API_V4_URL=$CI_API_V4_URL \
        --build-arg CI_PROJECT_ID=$CI_PROJECT_ID
      # --push \
      # --tag $CI_REGISTRY_IMAGE/$DOCKER_CREATED_IMAGE_NAME:$CI_COMMIT_SHA;
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    # - if: $CI_COMMIT_TAG
    #   when: on_success
    # - if: '$CI_COMMIT_BRANCH == "development" && $CI_COMMIT_TITLE =~ /Merge branch.*/'
    #   when: on_success
    - if: '$CI_COMMIT_BRANCH != "master"'
      allow_failure: true
      when: manual
    - when: never






# Docker Container:
#   extends: .build_docker_container
#  needs: [ "Build/Cache Python Packages" ]
  # stage: build
  # image: registry.gitlab.com/gdunstone/docker-buildx-qemu
  # services:
  #   - name: docker:23-dind
  #     entrypoint: ["env", "-u", "DOCKER_HOST"]
  #     command: ["dockerd-entrypoint.sh"]

  # variables:
  #   DOCKER_HOST: tcp://docker:2375/
  #   DOCKER_DRIVER: overlay2
  #   # See https://github.com/docker-library/docker/pull/166
  #   DOCKER_TLS_CERTDIR: ""
  # before_script:
  #   - docker info
  #   - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  #   - export DEBIAN_FRONTEND=noninteractive
  #   - apt update --allow-releaseinfo-change
  #   - apt --no-install-recommends -yq install python3 git python3-pip
  #   #- pip3 install -r gitlab-ci/gitlab_release/requirements.txt
  #   - pip3 install setuptools wheel
  #   - pip3 install commitizen==2.21.0 # version specified so current build works.
  #   - pip3 install gitlab-ci/gitlab_release/python-module/cz_nfc/.
  #   - update-binfmts --enable # Important: Ensures execution of other binary formats is enabled in the kernel
  #   - docker buildx create --driver=docker-container --driver-opt image=moby/buildkit:v0.11.6 --use
  #   - docker buildx inspect --bootstrap

  # script: |

  #   if [ "0$DOCKER_TARGET_PLATFORMS" != "0" ]; then

  #     docker buildx build --platform=$DOCKER_TARGET_PLATFORMS . \
  #       --label org.opencontainers.image.created="$(date '+%Y-%m-%d %H:%M:%S%:z')" \
  #       --label org.opencontainers.image.documentation="$CI_PROJECT_URL" \
  #       --label org.opencontainers.image.source="$CI_PROJECT_URL" \
  #       --label org.opencontainers.image.url="$CI_PROJECT_URL/-/releases/$(cz -n cz_nfc version --project)" \
  #       --label org.opencontainers.image.version="$(cz -n cz_nfc version --project)" \
  #       --label org.opencontainers.image.revision="$CI_COMMIT_SHA" \
  #     --push \
  #     --tag $CI_REGISTRY_IMAGE/$DOCKER_CREATED_IMAGE_NAME:$CI_COMMIT_SHA;
    
  #   else

  #   docker build . \
  #       --label org.opencontainers.image.created="$(date '+%Y-%m-%d %H:%M:%S%:z')" \
  #       --label org.opencontainers.image.documentation="$CI_PROJECT_URL" \
  #       --label org.opencontainers.image.source="$CI_PROJECT_URL" \
  #       --label org.opencontainers.image.url="$CI_PROJECT_URL/-/releases/$(cz -n cz_nfc version --project)" \
  #       --label org.opencontainers.image.version="$(cz -n cz_nfc version --project)" \
  #       --label org.opencontainers.image.revision="$CI_COMMIT_SHA" \
  #     --no-cache \
  #     --tag $CI_REGISTRY_IMAGE/$DOCKER_CREATED_IMAGE_NAME:$CI_COMMIT_SHA;
    
  #   docker push $CI_REGISTRY_IMAGE/$DOCKER_CREATED_IMAGE_NAME:$CI_COMMIT_SHA;

  #   fi
  # needs: [ "Build/Cache Python Packages" ]
  # rules:
  #   - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #     when: never
  #   - if: $CI_COMMIT_TAG
  #     when: on_success
  #   - if: '$CI_COMMIT_BRANCH == "development" && $CI_COMMIT_TITLE =~ /Merge branch.*/'
  #     when: on_success
  #   - if: '$CI_COMMIT_BRANCH != "master"'
  #     allow_failure: false
  #     when: on_success
  #   - when: never



# disabled until solution for multi-arch images found
# container_scanning:
#   variables:
#     #CS_DEFAULT_BRANCH_IMAGE: $CI_REGISTRY_IMAGE/$DOCKER_CREATED_IMAGE_NAME:$CI_COMMIT_SHA
#     GIT_STRATEGY: fetch
#     CS_MULTI_ARCH_INDEX: 0
#   before_script:
#     #- export CS_IMAGE=registry.gitlab.com/nofusscomputing/projects/ansible/execution_environment/ansible-ee:a0d89d1ef152ad057c5567ca1caefbfc687a8183@sha256:b89eab46ebc4d0d0028803ac94aaed837248a7fbd695b811e7e1fad9365cba9a
#     - export CS_IMAGE=$(docker buildx imagetools inspect "$CI_REGISTRY_IMAGE/$DOCKER_CREATED_IMAGE_NAME::a0d89d1ef152ad057c5567ca1caefbfc687a8183" --format "$CI_REGISTRY_IMAGE/$DOCKER_CREATED_IMAGE_NAME:a0d89d1ef152ad057c5567ca1caefbfc687a8183@{{ ( index .Manifest.Manifests $CS_MULTI_ARCH_INDEX ).Digest }}")
#   needs: [ "Docker Container" ]
#   rules:
#     - if: '$CI_PIPELINE_SOURCE != "merge_request_event"'
#       when: always
#     - when: never


# Docker Hub:
#   stage: publish
#   image: docker:23
#   services:
#     - docker:23-dind
#   before_script:
#     - |

#       docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD;

#       if [ "0$DOCKER_TARGET_PLATFORMS" != "0" ]; then

#         for i in ${DOCKER_TARGET_PLATFORMS//,/ }
#         do
#           echo "[DEBUG] IMAGE_NAME=$DOCKER_CREATED_IMAGE_NAME";

#           docker buildx imagetools inspect $CI_REGISTRY_IMAGE/$DOCKER_CREATED_IMAGE_NAME:$CI_COMMIT_SHA;

#           DOCKER_MULTI_ARCH_IMAGES=$(docker buildx imagetools inspect "registry.gitlab.com/nofusscomputing/projects/ansible/execution_environment/ansible-ee:$CI_COMMIT_SHA" --format "{{ range .Manifest.Manifests }}$CI_REGISTRY_IMAGE/$DOCKER_CREATED_IMAGE_NAME:$CI_COMMIT_SHA@{{print .Digest }} {{end}}")

#           echo "[DEBUG] DOCKER_MULTI_ARCH_IMAGES=$DOCKER_MULTI_ARCH_IMAGES";

#         done;

#       else

#         docker pull $CI_REGISTRY_IMAGE/$DOCKER_CREATED_IMAGE_NAME:$CI_COMMIT_SHA;

#       fi

#       docker logout $CI_REGISTRY;

#   script:
#     - docker login docker.io -u $NFC_DOCKERHUB_USERNAME -p $NFC_DOCKERHUB_TOKEN
#     - docker image ls
#     - |
#       DOCKER_HUB_TAG=dev

#       if [ "0$CI_COMMIT_TAG" != "0" ]; then

#         DOCKER_HUB_TAG=latest

#         if [ "0$CI_COMMIT_TAG" == *"rc"* ]; then

#           DOCKER_HUB_TAG=dev

#         fi

#       fi

#       echo "[DEBUG] IMAGE_NAME=$DOCKER_CREATED_IMAGE_NAME";
#       echo "[DEBUG] DOCKER_HUB_TAG=$DOCKER_HUB_TAG";

#       if [ "0$DOCKER_TARGET_PLATFORMS" != "0" ]; then

#         echo "[DEBUG] DOCKER_MULTI_ARCH_IMAGES=$DOCKER_MULTI_ARCH_IMAGES";
        
#         docker buildx imagetools create $DOCKER_MULTI_ARCH_IMAGES --tag nofusscomputing/$DOCKER_CREATED_IMAGE_NAME:$DOCKER_HUB_TAG;

#         if [ "0$DOCKER_HUB_TAG" == "0latest" ]; then

#           docker buildx imagetools create $DOCKER_MULTI_ARCH_IMAGES --tag nofusscomputing/$DOCKER_CREATED_IMAGE_NAME:$CI_COMMIT_TAG;

#         fi

#       else

#         docker image tag $CI_REGISTRY_IMAGE/$DOCKER_CREATED_IMAGE_NAME:$CI_COMMIT_SHA nofusscomputing/$DOCKER_CREATED_IMAGE_NAME:$DOCKER_HUB_TAG;

#         docker push nofusscomputing/$DOCKER_CREATED_IMAGE_NAME:$DOCKER_HUB_TAG;

#         if [ "0$DOCKER_HUB_TAG" == "0latest" ]; then

#           docker image tag $CI_REGISTRY_IMAGE/$DOCKER_CREATED_IMAGE_NAME:$CI_COMMIT_SHA nofusscomputing/$DOCKER_CREATED_IMAGE_NAME:$CI_COMMIT_TAG;

#           docker push nofusscomputing/$DOCKER_CREATED_IMAGE_NAME:$CI_COMMIT_TAG;

#         fi

#       fi

#     - docker logout docker.io
#   needs: [ "Docker Container" ]
#   environment:
#     name: DockerHub
#     url: https://hub.docker.com/r/nofusscomputing/$DOCKER_CREATED_IMAGE_NAME
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#       when: never
#     - if: $CI_COMMIT_TAG
#       when: on_success
#     - if: '$CI_COMMIT_BRANCH == "development" && $CI_COMMIT_TITLE =~ /Merge branch.*/'
#       when: on_success
#     - if: '$CI_COMMIT_BRANCH == "development"'
#       allow_failure: true
#       when: manual
#     - when: never


# Github (Push --mirror):
#     variables:
#         GIT_SYNC_URL: "https://$GITHUB_USERNAME_ROBOT:$GITHUB_TOKEN_ROBOT@github.com/NoFussComputing/execution_environment.git"
#     extends:
#         - .git_push_mirror
